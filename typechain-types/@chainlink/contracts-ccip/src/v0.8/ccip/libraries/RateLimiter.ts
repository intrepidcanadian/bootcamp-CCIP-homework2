/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export declare namespace RateLimiter {
  export type ConfigStruct = {
    isEnabled: PromiseOrValue<boolean>;
    capacity: PromiseOrValue<BigNumberish>;
    rate: PromiseOrValue<BigNumberish>;
  };

  export type ConfigStructOutput = [boolean, BigNumber, BigNumber] & {
    isEnabled: boolean;
    capacity: BigNumber;
    rate: BigNumber;
  };
}

export interface RateLimiterInterface extends utils.Interface {
  functions: {};

  events: {
    "ConfigChanged(tuple)": EventFragment;
    "TokensConsumed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConfigChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensConsumed"): EventFragment;
}

export interface ConfigChangedEventObject {
  config: RateLimiter.ConfigStructOutput;
}
export type ConfigChangedEvent = TypedEvent<
  [RateLimiter.ConfigStructOutput],
  ConfigChangedEventObject
>;

export type ConfigChangedEventFilter = TypedEventFilter<ConfigChangedEvent>;

export interface TokensConsumedEventObject {
  tokens: BigNumber;
}
export type TokensConsumedEvent = TypedEvent<
  [BigNumber],
  TokensConsumedEventObject
>;

export type TokensConsumedEventFilter = TypedEventFilter<TokensConsumedEvent>;

export interface RateLimiter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RateLimiterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "ConfigChanged(tuple)"(config?: null): ConfigChangedEventFilter;
    ConfigChanged(config?: null): ConfigChangedEventFilter;

    "TokensConsumed(uint256)"(tokens?: null): TokensConsumedEventFilter;
    TokensConsumed(tokens?: null): TokensConsumedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
