/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../../common";

export declare namespace Internal {
  export type TimestampedPackedUint224Struct = {
    value: PromiseOrValue<BigNumberish>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type TimestampedPackedUint224StructOutput = [BigNumber, number] & {
    value: BigNumber;
    timestamp: number;
  };

  export type TokenPriceUpdateStruct = {
    sourceToken: PromiseOrValue<string>;
    usdPerToken: PromiseOrValue<BigNumberish>;
  };

  export type TokenPriceUpdateStructOutput = [string, BigNumber] & {
    sourceToken: string;
    usdPerToken: BigNumber;
  };

  export type GasPriceUpdateStruct = {
    destChainSelector: PromiseOrValue<BigNumberish>;
    usdPerUnitGas: PromiseOrValue<BigNumberish>;
  };

  export type GasPriceUpdateStructOutput = [BigNumber, BigNumber] & {
    destChainSelector: BigNumber;
    usdPerUnitGas: BigNumber;
  };

  export type PriceUpdatesStruct = {
    tokenPriceUpdates: Internal.TokenPriceUpdateStruct[];
    gasPriceUpdates: Internal.GasPriceUpdateStruct[];
  };

  export type PriceUpdatesStructOutput = [
    Internal.TokenPriceUpdateStructOutput[],
    Internal.GasPriceUpdateStructOutput[]
  ] & {
    tokenPriceUpdates: Internal.TokenPriceUpdateStructOutput[];
    gasPriceUpdates: Internal.GasPriceUpdateStructOutput[];
  };
}

export interface IPriceRegistryInterface extends utils.Interface {
  functions: {
    "convertTokenAmount(address,uint256,address)": FunctionFragment;
    "getDestinationChainGasPrice(uint64)": FunctionFragment;
    "getTokenAndGasPrices(address,uint64)": FunctionFragment;
    "getTokenPrice(address)": FunctionFragment;
    "getTokenPrices(address[])": FunctionFragment;
    "getValidatedTokenPrice(address)": FunctionFragment;
    "updatePrices(((address,uint224)[],(uint64,uint224)[]))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "convertTokenAmount"
      | "getDestinationChainGasPrice"
      | "getTokenAndGasPrices"
      | "getTokenPrice"
      | "getTokenPrices"
      | "getValidatedTokenPrice"
      | "updatePrices"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "convertTokenAmount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDestinationChainGasPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenAndGasPrices",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTokenPrices",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatedTokenPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrices",
    values: [Internal.PriceUpdatesStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "convertTokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDestinationChainGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenAndGasPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenPrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatedTokenPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrices",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPriceRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPriceRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    convertTokenAmount(
      fromToken: PromiseOrValue<string>,
      fromTokenAmount: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { toTokenAmount: BigNumber }>;

    getDestinationChainGasPrice(
      destChainSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Internal.TimestampedPackedUint224StructOutput]>;

    getTokenAndGasPrices(
      token: PromiseOrValue<string>,
      destChainSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenPrice: BigNumber; gasPrice: BigNumber }
    >;

    getTokenPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Internal.TimestampedPackedUint224StructOutput]>;

    getTokenPrices(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[Internal.TimestampedPackedUint224StructOutput[]]>;

    getValidatedTokenPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updatePrices(
      priceUpdates: Internal.PriceUpdatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  convertTokenAmount(
    fromToken: PromiseOrValue<string>,
    fromTokenAmount: PromiseOrValue<BigNumberish>,
    toToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getDestinationChainGasPrice(
    destChainSelector: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Internal.TimestampedPackedUint224StructOutput>;

  getTokenAndGasPrices(
    token: PromiseOrValue<string>,
    destChainSelector: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { tokenPrice: BigNumber; gasPrice: BigNumber }
  >;

  getTokenPrice(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Internal.TimestampedPackedUint224StructOutput>;

  getTokenPrices(
    tokens: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<Internal.TimestampedPackedUint224StructOutput[]>;

  getValidatedTokenPrice(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updatePrices(
    priceUpdates: Internal.PriceUpdatesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    convertTokenAmount(
      fromToken: PromiseOrValue<string>,
      fromTokenAmount: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDestinationChainGasPrice(
      destChainSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Internal.TimestampedPackedUint224StructOutput>;

    getTokenAndGasPrices(
      token: PromiseOrValue<string>,
      destChainSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { tokenPrice: BigNumber; gasPrice: BigNumber }
    >;

    getTokenPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Internal.TimestampedPackedUint224StructOutput>;

    getTokenPrices(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<Internal.TimestampedPackedUint224StructOutput[]>;

    getValidatedTokenPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePrices(
      priceUpdates: Internal.PriceUpdatesStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    convertTokenAmount(
      fromToken: PromiseOrValue<string>,
      fromTokenAmount: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDestinationChainGasPrice(
      destChainSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenAndGasPrices(
      token: PromiseOrValue<string>,
      destChainSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenPrices(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatedTokenPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePrices(
      priceUpdates: Internal.PriceUpdatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    convertTokenAmount(
      fromToken: PromiseOrValue<string>,
      fromTokenAmount: PromiseOrValue<BigNumberish>,
      toToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDestinationChainGasPrice(
      destChainSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenAndGasPrices(
      token: PromiseOrValue<string>,
      destChainSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenPrices(
      tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatedTokenPrice(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePrices(
      priceUpdates: Internal.PriceUpdatesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
