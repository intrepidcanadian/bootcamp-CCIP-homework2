/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace Register {
  export type NetworkDetailsStruct = {
    chainSelector: PromiseOrValue<BigNumberish>;
    routerAddress: PromiseOrValue<string>;
    linkAddress: PromiseOrValue<string>;
    wrappedNativeAddress: PromiseOrValue<string>;
    ccipBnMAddress: PromiseOrValue<string>;
    ccipLnMAddress: PromiseOrValue<string>;
  };

  export type NetworkDetailsStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    string
  ] & {
    chainSelector: BigNumber;
    routerAddress: string;
    linkAddress: string;
    wrappedNativeAddress: string;
    ccipBnMAddress: string;
    ccipLnMAddress: string;
  };
}

export interface RegisterInterface extends utils.Interface {
  functions: {
    "getNetworkDetails(uint256)": FunctionFragment;
    "setNetworkDetails(uint256,(uint64,address,address,address,address,address))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getNetworkDetails" | "setNetworkDetails"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getNetworkDetails",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNetworkDetails",
    values: [PromiseOrValue<BigNumberish>, Register.NetworkDetailsStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "getNetworkDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNetworkDetails",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Register extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegisterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getNetworkDetails(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Register.NetworkDetailsStructOutput]>;

    setNetworkDetails(
      chainId: PromiseOrValue<BigNumberish>,
      networkDetails: Register.NetworkDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getNetworkDetails(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Register.NetworkDetailsStructOutput>;

  setNetworkDetails(
    chainId: PromiseOrValue<BigNumberish>,
    networkDetails: Register.NetworkDetailsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getNetworkDetails(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Register.NetworkDetailsStructOutput>;

    setNetworkDetails(
      chainId: PromiseOrValue<BigNumberish>,
      networkDetails: Register.NetworkDetailsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getNetworkDetails(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNetworkDetails(
      chainId: PromiseOrValue<BigNumberish>,
      networkDetails: Register.NetworkDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getNetworkDetails(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNetworkDetails(
      chainId: PromiseOrValue<BigNumberish>,
      networkDetails: Register.NetworkDetailsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
